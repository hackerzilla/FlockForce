[gd_scene load_steps=6 format=3 uid="uid://bbjutj3dpfh4x"]

[ext_resource type="Script" uid="uid://csrwxulbjurpq" path="res://julian-particles/fps_label.gd" id="1_33ucc"]

[sub_resource type="Shader" id="Shader_33ucc"]
code = "shader_type particles;

// For now the array size is hard-coded
const uint NUM_BOIDS = uint(100);
uniform vec3 boids_pos[NUM_BOIDS];
uniform vec3 boids_vel[NUM_BOIDS];
const float FRIEND_RADIUS = 20.0;

float rand_from_seed(in uint seed) {
  int k;
  int s = int(seed);
  if (s == 0)
    s = 305420679;
  k = s / 127773;
  s = 16807 * (s - k * 127773) - 2836 * k;
  if (s < 0)
    s += 2147483647;
  seed = uint(s);
  return float(seed % uint(65536)) / 65535.0;
}

uint hash(uint x) {
  x = ((x >> uint(16)) ^ x) * uint(73244475);
  x = ((x >> uint(16)) ^ x) * uint(73244475);
  x = (x >> uint(16)) ^ x;
  return x;
}

void start() {
	// Called when a particle is spawned.
	uint alt_seed1 = hash(NUMBER + uint(1) + RANDOM_SEED);
	uint alt_seed2 = hash(NUMBER + uint(27) + RANDOM_SEED);
	uint alt_seed3 = hash(NUMBER + uint(43) + RANDOM_SEED);
	uint alt_seed4 = hash(NUMBER + uint(111) + RANDOM_SEED);
	vec3 position = vec3(rand_from_seed(alt_seed2) * 2.0 - 1.0,
                     rand_from_seed(alt_seed3) * 2.0 - 1.0,
                     rand_from_seed(alt_seed4) * 2.0 - 1.0);
	TRANSFORM[3].xyz = position * 20.0;
	vec3 velocity = vec3(rand_from_seed(alt_seed2) * 2.0 - 1.0,
                     rand_from_seed(alt_seed3) * 2.0 - 1.0,
                     rand_from_seed(alt_seed4) * 2.0 - 1.0);
	VELOCITY = velocity;

	//boids_pos[INDEX] = TRANSFORM[3].xyz;
	//boids_vel[INDEX] = VELOCITY;
}

void process() {
	// Called every frame on existing particles (according to the Fixed FPS property).
	vec3 pos = boids_pos[INDEX];
	vec3 other_pos;

	vec3 alignment = vec3(0);
	vec3 center_of_mass = vec3(0);
	int num_friends = 0;

	for (uint i = uint(0); i < NUM_BOIDS; i++)
	{
		if (i == INDEX) continue;
		other_pos = boids_pos[i];
		float dist = distance(pos, other_pos);
		if (dist <= FRIEND_RADIUS)
		{
			num_friends++;
			alignment += boids_vel[i]; // Should I normalize this?
			center_of_mass += boids_pos[i];
		}
	}
	if (num_friends > 0)
	{
		alignment *= 1.0/float(num_friends);
		center_of_mass *= 1.0/float(num_friends);
		vec3 new_vel;
		VELOCITY = new_vel;
	}

	//boids_pos[INDEX] = TRANSFORM[3].xyz;
	//boids_vel[INDEX] = VELOCITY;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_0sxts"]
shader = SubResource("Shader_33ucc")
shader_parameter/boids_pos = PackedVector3Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
shader_parameter/boids_vel = PackedVector3Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_bvrfd"]
albedo_color = Color(0, 0.366667, 1, 0.501961)
emission = Color(0.1595, 0.523967, 0.55, 1)

[sub_resource type="SphereMesh" id="SphereMesh_33ucc"]
material = SubResource("StandardMaterial3D_bvrfd")
radial_segments = 18
rings = 14

[node name="ParticlesTest" type="Node3D"]

[node name="GPUParticles3D" type="GPUParticles3D" parent="."]
emitting = false
amount = 100
lifetime = 11.16
process_material = SubResource("ShaderMaterial_0sxts")
draw_pass_1 = SubResource("SphereMesh_33ucc")

[node name="GPUParticles3D" type="GPUParticles3D" parent="GPUParticles3D"]
emitting = false
amount = 100
lifetime = 11.16
process_material = SubResource("ShaderMaterial_0sxts")
draw_pass_1 = SubResource("SphereMesh_33ucc")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 147.455)

[node name="Label" type="Label" parent="."]
offset_right = 36.0
offset_bottom = 49.0
text = "FPS: 
"
script = ExtResource("1_33ucc")
